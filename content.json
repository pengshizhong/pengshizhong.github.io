[{"title":"第四周学习笔记","date":"2017-03-27T16:00:00.000Z","path":"2017/03/28/第四周学习笔记/","text":"linux权限知识补充12345678910111213141516#怎么才能删除一个文件，满足以下几个要求1.对目录有可执行权限2.对目录有写权限3.对文件有写权限#什么是粘滞位作用：有这个标志的目录下的文件，只允许所有者和管理员才能删除表示方式：t表示有粘滞位也有可执行权限，T表示有粘滞位但是没有可执行权限#增加粘滞位的方法chmod a+t dir_name#设置sid和gid的方法sid=4000gid=2000只要在原来的777前面加上数字即可因为安全限制，所以uid只有Linux二进制elf文件才能设置#特殊实验文件权限677，则拥有者无法执行此文件 创建不可修改文件12345678910#管理员权限执行以下命令touch /tmp/test.txtsudo chattr +i /tmp/test.txt#这句话报错，管理员也无法写入echo 'test' &gt;&gt; /tmp/test.txt#这里会发现没有内容被写入文件cat /tmp/test.txt#即使管理员权限也无法删除rm /tmp/test.txtchattr -i /tmp/test.txt 快速查看文件差异性123456789101112131415161718192021222324252627282930#文件内容1line 1line 2line 3lalalala#文件内容2line 1line 3line 2papapap#执行此命令diff version1.txt version2.txt#输出如下#+代表在文件1的基础上增加的行，-代表在文件1的基础上增加的行--- version1.txt 2017-04-04 17:51:13.000000000 +0800+++ version2.txt 2017-04-04 17:51:46.000000000 +0800@@ -1,4 +1,4 @@ line 1-line 2 line 3-lalalala+line 2+papapap#保存修改的内容diff -u version1.txt version2.txt &gt;&gt; patch.txt#将文件1恢复成文件2#再执行一次可以撤销patch -p1 version1.txt &lt; patch.txt 切换目录小技巧123456#pushd把当前目录记录到栈中pushd +num 跳转到指定目录#执行pushd之后会有以下提示，是栈中的内容，从0开始~/Documents ~/Documents/pengshizhong /tmp ~#执行下面命令可以删除栈中的内容，从0开始popd num","tags":[{"name":"shell脚本攻略读书笔记","slug":"shell脚本攻略读书笔记","permalink":"http://yoursite.com/tags/shell脚本攻略读书笔记/"}]},{"title":"第三周学习笔记","date":"2017-03-24T16:00:00.000Z","path":"2017/03/25/第三周学习笔记/","text":"知识点覆盖1.文件处理命令：uniq、sort、comm等命令 2.自动化交互处理命令：expect 3.使用通配符对变量或文件进行解析截取 4.创建测试数据：生成指定大小指定随机内容的测试数据 sort命令的用法123456789101112#1.生成随机数文件用于测试for i in &#123;1..100&#125; do echo $RANDOM &gt;&gt; 123.txt done#2.数字排序，注意默认的排序不是数字大小排序sort -n filename#3.逆序排序sort -r filename#4.指定列进行排序,指定第二列进行排序#生成测试数据for i in &#123;1..100&#125; do echo $i' '$RANDOM&gt;&gt;123.txt;#排序代码sort -nrk 2 uniq命令的用法123456789#注意：这个命令只能对排序后的文件起作用#1.普通用法sort -n 123.txt | uniq#2.统计出现次数sort -n 123.txt | uniq -c#3.找出重复的行sort -n 123.txt | uniq -d#4.截取指定位置的字符串做uniq操作,s表示开始位置w表示截取字数sort -n 123.txt | uniq -s 2 -w 2 截取字符串123456789101112#示例：截取文件名#注意通配符和正则是两码事#下面的示例表示的是截取文件的名字#原理：$&#123;var%.*&#125;这个命令的意思是把变量var从右边开始匹配到的符合%右边的通配符的字符串删除，这个是非贪婪匹配，然而%%是贪婪匹配file='sample.jpg.png';echo $&#123;file%.*&#125;; #输出：sample.jpgecho $&#123;file%%.*&#125; #输出：sample#截取扩展名，原理和上面的一样，只是%变成了#，并且匹配方向为从左到右file='sample.jpg.png';echo $&#123;file#*.&#125;; #输出：sample.jpgecho $&#123;file##*.&#125; #输出：sample 使用通配符匹配所有文件12345#for循环除了数字还可以用通配符for file in *.jpg *.png;do echo $file;done; echo的一些参数指定123456789101112131415161718#若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：#\\a 发出警告声；#\\b 删除前一个字符；#\\c 最后不加上换行符号；#\\f 换行但光标仍旧停留在原来的位置；#\\n 换行且光标移至行首；#\\r 光标移至行首，但不换行；#\\t 插入tab；#\\v 与\\f相同；#\\\\ 插入\\字符；#\\nnn 插入nnn（八进制）所代表的ASCII字符；比如：echo -e \"a\\nbbb\";#输出 #a#bbbecho \"a\\nbbb\"#输出 a\\nbbb expect自动化输入命令1234567891011121314151617#注意文件头不是/bin/bash#!/usr/bin/expect#spawn表示要执行的脚本#expect表示输入提示，支持通配符#send表示要发送的字符串后面要手动加\\n#expect eof表示交互结束#下方为自动登录堡垒机的代码示例#!/usr/bin/expectset user pengshizhongset ip 14.18.204.66set password xxxxset timeout 100spawn ssh $user@$ipexpect \"*assword:*\"send \"$password\\r\"expect eof 文件比较：comm1234567891011121314151617181920212223242526#注意：comm只对排序过的文件起作用#测试数据：for i in &#123;5..15&#125;;do echo $i &gt;&gt; a.txt; done;for i in &#123;1..10&#125;;do echo $i &gt;&gt; b.txt; done;comm a.txt b.txt#输出共三列如下: 1 2 3 4 5 6 7 8 9 101112131415#第一列表示只在第一个输入文件中出现的数据#第二列表示只在第二个输入文件中出现的数据#第三列表示在两个输入中都存在的数据#可以通过加上参数 -123指定删除的输出，注意是删除#列之间的分隔符是制表符，可以用于替换 创建长目录123#如果要创建~/a/b/c/d/e这个目录#直接执行mkdir -p ~/a/b/c/d/e","tags":[{"name":"shell脚本攻略读书笔记","slug":"shell脚本攻略读书笔记","permalink":"http://yoursite.com/tags/shell脚本攻略读书笔记/"}]},{"title":"第二周学习笔记","date":"2017-03-18T16:00:00.000Z","path":"2017/03/19/第二周学习笔记/","text":"知识点覆盖1.shell的函数定义及使用 2.循环结构写法 3.分支结构写法 4.xargs和find使用 函数定义与使用123456789101112131415161718192021#!/bin/bashfunction helloworld() &#123; echo 'hello world!'; #全部参数 echo $@ #第一个参数 echo $1 #当前脚本名称 echo $0 #全部参数 echo $*&#125;helloworld 12 34有几个和普通php脚本不同的地方需要注意：1.函数定义必须在执行脚本之前2.函数定义不需要参数列表3.函数调用不需要括号4.function关键字可有可无5.返回码必须是数字 获取命令的输出123456#!/bin/bashoutput=$(ls|cat -n)echo $outputoutput2=`ls|cat -n`echo $output2 read的几种用法12345678910111213#!/bin/bash#读取2个字符就输入结束read -n 2 varecho $var#不回显的方法输入，比如输入密码read -s var#时限内输入read -t 2 var#定界符,输入input:,则var变成inputread -d ':' var IFS12345678910#!/bin/bashold=$IFSstr=\"name,old,test,oo,das.sdad\"IFS=.for item in $strdoecho $itemdoneIFS=old先设置IFS后可以直接for循环遍历字符串 for循环12345678910111213141516171819202122231.简单for in如上个IFS示例，注意in后面的变量要美元符号2.for循环,注意for循环这一行是不需要美元符号的#!/bin/bashfor((i=0;i&lt;5;i++))do echo $idone3.while循环，主要是条件判断比较坑#!/bin/bashcount=0while [ $count -ne 5 ]do echo $count let count++done4.和wile正好相反#!/bin/bashcount=0until [ $count -eq 5 ]do echo $count let count++done if语句123456789101112131415161718192021222324252627#!/bin/basha=1b=2c=3d=4#-a表示与 -o表示或if [ $a -lt $b -a $c -lt $d ];then echo \"$a is small!\";else echo \"$b is small!\";fi#!/bin/basha=1b=2c=3d=4#注意这个[[]]要写2次#test 可以直接代替中括号比如#if test $a -lt $b &amp;&amp; test $c -lt $d ;if [[ $a -lt $b ]] &amp;&amp; [[ $c -lt $d ]];then echo \"$a is small!\";else echo \"$b is small!\";fi find命令1234567891011121314151617181920211.列出当前目录下所有文件find .2.查找指定文件名使用正则表达式这个比较坑，find的正则表达式不是常用的扩展类型所以最好是用grep，但是注意文件名前面都是带.和/的，需要转义find . | grep -E ^\\./\\*t3.按类型搜索find . -type d4.指定深度find . -type d -maxdepth 3 -mindepth 35.根据修改时间、访问时间、变化时间（权限、所有者）修改find . -type d -atime 7 #7天前访问过的目录，单位是天find . -type d -amin 7 #7分钟前访问过的目录，单位是天6.基于文件大小，可用单位：b（512字节），c（字节），w（字），k，m，gfind . -type d -size +2k #+表示大于，-表示小于7.根据权限查找find . -perm 7778.根据所有者查找find . -user www9.对每个找到的文件使用exec后面的命令，注意最后要用 空格+\\;结尾find . -type d -maxdepth 3 -mindepth 3 -user www -exec cat &#123;&#125;'jkhkj' \\; xargs用法123456781.多行变一行cat test.txt | xargs2.一行变多行echo 'djhsa djkahsdkaj dsahdjka dasjdka' | xargs -n 23.指定分隔符echo 'djhsaXdjkahsdkajXdsahdjkaXdasjdka' | xargs -d X4.设置参数模板echo '123 123 123' | xargs -I &#123;&#125; -n 1 echo &#123;&#125;'dsa'; tr解释字符串12341.小写转大写cat /etc/passwd | tr 'a-z' 'A-Z'2.删除指定字符cat /etc/passwd | tr -d 'a-z'","tags":[{"name":"shell脚本攻略读书笔记","slug":"shell脚本攻略读书笔记","permalink":"http://yoursite.com/tags/shell脚本攻略读书笔记/"}]},{"title":"第一周学习笔记","date":"2017-03-11T16:00:00.000Z","path":"2017/03/12/第一周学习笔记/","text":"知识点覆盖1.字符串常用操作 2.shell数学运算 3.文件描述符与重定向运用 4.简单数组和关联数组运用 5.shell脚本调试方法 格式化输出1234567891011121314#注意：如果格式化使用了d那么后面一定要是整形数字，不然会报错#d s f 这些和C相同，分别代表数据类型#-5 -10 -4则代表对其，-表示左对齐#!/bin/bashprintf \"%-5s %-10s %-4s\\n\" No Name Markprintf \"%-5d %-10s %-4.2f\\n\" 1 pengshzihong 89.222printf \"%-5d %-10s %-4.3f\\n\" 1 pengshzihong 82.123printf \"%-5d %-10s %-4.0f\\n\" 1 pengshzihong 82.12以上代码输出：No Name Mark1 pengshzihong 89.221 pengshzihong 82.1231 pengshzihong 82 获取进程ID123pgrep 进程名称命令： pgrep php输出： 414 获取字符串长度的方法 1234var=23618236187length=$&#123;#var&#125;echo $length输出：11 获取用户UID 123#UID是一个环境变量，管理员是0uid=$UIDecho $uid 数学计算(整形运算)123456789101112131415161718192021#注意，let的计算是不用加美元符号的，可以像其他编程语言一样计算a=1b=2let result=a+becho $resultlet result++echo $resultlet result+8echo $resultlet result-3echo $result#其他方法：(()) 这种一定要在变量前面加美元符号,括号前面也要result=$(($a+$b))echo $result#其他方法：[] 数组符号，这个和let一样result=$[a+b];echo $result#exprresult=$(expr $a + $b);echo $result; 高级运算12345678910111213141516#使用管道输出表达式到bcecho \"89.2 * 2882 \"| bc#传递scale参数可以设置小数点后面的精确度echo \"scale=1;3/8\" | bc#进制转换#十进制转化2进制test=10echo \"obase=2;$test\" | bc#二进制转换为10进制echo \"obase=10;ibase=2;1010\" | bc#计算平方和平方根echo \"sqrt(100)\"| bcecho \"2^3\"| bc 几种重定向文件描述符写法解析 1234567891011121314#把正确错误信息都写入/tmp/testls + &amp;&gt; /tmp/test#把错误信息写入testls + 2&gt;/tmp/test#tee把标准输入写入文件同时作为标准输出传递给下一个命令#注意tee只会读取标准输入的信息，所以第二个命令执行时没有数据的ls | tee /tmp/test | wc -lls +| tee /tmp/test | wc -l#把EOF的多行文本做为输入写入文件cat &lt;&lt; EOF &gt;&gt; /tmp/testtesteof 自定义文件描述符1234567891011121314#注意&amp;号一定要有#而且只读文件描述符只能使用一次！exec 3 &lt; /tmp/testcat &lt;&amp;3;#截断模式的话，会一直从当前的位置向后覆盖exec 5&gt;/tmp/testecho 'test' &gt;&amp;5#直接追加exec 6&gt;&gt;/tmp/testecho 'test' &gt;&amp;6注意：如果同时存在截断和追加的文件描述符，截断模式写入的数据会从截断的位置开始一行一行的覆盖掉后面其他描述符加入的数据 简单数组定义1234567891011#数组定义方法一： array=(1 2 3 4 5 6)方法二： 注意，直接赋值的方法索引必须是数字！！！array[1]=4array=[2]=5;#打印全部数组echo $array[*] 或者是 echo $array[@]#打印数组长度echo $&#123;#array[*]&#125; 或者echo $&#123;#array[*]&#125; 关联数组123456789#关联数组声明首先是需要显式的定义declare -A guanlian#给关联数组赋值可以像普通数组那样单个赋值，批量赋值如下guanlian=([apple]='5' [orange]='6') #mac下实验暂时不成功#单个赋值不需要双引号guanlian[key]=value#其他获取长度和值和普通一样#获取所有键的方法echo $&#123;!guanlian[*]&#125; #mac下暂不成功 别名设置1234建立别名：alias new_cmd='ls -l'解除别名：unalias new_cmd重复创建新的别名会取代旧的为了防止使用别名中使用了已经定义的别名可以在cmd中加上\\来强行运行原来的命令 控制终端显示输入12stty -echo;read 让输入不在终端显示stty echo; read 输入会在终端显示 调试脚本 123456#启动方式：bash -x script_name在set -x和set +x 直接的东西会处于调试模式，详情见debug.sh另外直接把脚本的!#/bin/bash改为 !#/bin/bash -xv也会直接进入调试模式，详情见debug.sh","tags":[{"name":"shell脚本攻略读书笔记","slug":"shell脚本攻略读书笔记","permalink":"http://yoursite.com/tags/shell脚本攻略读书笔记/"}]}]